<<<<<<< HEAD
<<<<<<< HEAD
from typing import Literal
from typing_extensions import assert_type

import numpy as np

assert_type(np.e, float)
assert_type(np.euler_gamma, float)
assert_type(np.inf, float)
assert_type(np.nan, float)
assert_type(np.pi, float)

assert_type(np.little_endian, bool)

assert_type(np.True_, np.bool[Literal[True]])
assert_type(np.False_, np.bool[Literal[False]])
=======
=======
from typing import Literal
from typing_extensions import assert_type

>>>>>>> 6d4acca (added stuff so I can run on nixos)
import numpy as np

assert_type(np.e, float)
assert_type(np.euler_gamma, float)
assert_type(np.inf, float)
assert_type(np.nan, float)
assert_type(np.pi, float)

assert_type(np.little_endian, bool)

<<<<<<< HEAD
reveal_type(np.little_endian)  # E: bool
reveal_type(np.True_)  # E: bool_
reveal_type(np.False_)  # E: bool_

reveal_type(np.UFUNC_PYVALS_NAME)  # E: Literal['UFUNC_PYVALS']

reveal_type(np.sctypeDict)  # E: dict
reveal_type(np.sctypes)  # E: TypedDict
>>>>>>> 596fb2e (Added incomplete requirements.txt)
=======
assert_type(np.True_, np.bool[Literal[True]])
assert_type(np.False_, np.bool[Literal[False]])
>>>>>>> 6d4acca (added stuff so I can run on nixos)
