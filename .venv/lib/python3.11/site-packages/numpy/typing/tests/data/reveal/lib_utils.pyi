from io import StringIO
<<<<<<< HEAD
<<<<<<< HEAD

import numpy as np
import numpy.typing as npt
import numpy.lib.array_utils as array_utils

from typing_extensions import assert_type

AR: npt.NDArray[np.float64]
AR_DICT: dict[str, npt.NDArray[np.float64]]
=======
from typing import Any
=======
>>>>>>> 6d4acca (added stuff so I can run on nixos)

import numpy as np
import numpy.typing as npt
import numpy.lib.array_utils as array_utils

<<<<<<< HEAD
AR: np.ndarray[Any, np.dtype[np.float64]]
AR_DICT: dict[str, np.ndarray[Any, np.dtype[np.float64]]]
>>>>>>> 596fb2e (Added incomplete requirements.txt)
=======
from typing_extensions import assert_type

AR: npt.NDArray[np.float64]
AR_DICT: dict[str, npt.NDArray[np.float64]]
>>>>>>> 6d4acca (added stuff so I can run on nixos)
FILE: StringIO

def func(a: int) -> bool: ...

<<<<<<< HEAD
<<<<<<< HEAD
assert_type(array_utils.byte_bounds(AR), tuple[int, int])
assert_type(array_utils.byte_bounds(np.float64()), tuple[int, int])

assert_type(np.info(1, output=FILE), None)
=======
reveal_type(np.deprecate(func))  # E: def (a: builtins.int) -> builtins.bool
reveal_type(np.deprecate())  # E: _Deprecate

reveal_type(np.deprecate_with_doc("test"))  # E: _Deprecate
reveal_type(np.deprecate_with_doc(None))  # E: _Deprecate

reveal_type(np.byte_bounds(AR))  # E: Tuple[builtins.int, builtins.int]
reveal_type(np.byte_bounds(np.float64()))  # E: Tuple[builtins.int, builtins.int]

reveal_type(np.who(None))  # E: None
reveal_type(np.who(AR_DICT))  # E: None

reveal_type(np.info(1, output=FILE))  # E: None

reveal_type(np.source(np.interp, output=FILE))  # E: None

reveal_type(np.lookfor("binary representation", output=FILE))  # E: None

reveal_type(np.safe_eval("1 + 1"))  # E: Any
>>>>>>> 596fb2e (Added incomplete requirements.txt)
=======
assert_type(array_utils.byte_bounds(AR), tuple[int, int])
assert_type(array_utils.byte_bounds(np.float64()), tuple[int, int])

assert_type(np.info(1, output=FILE), None)
>>>>>>> 6d4acca (added stuff so I can run on nixos)
