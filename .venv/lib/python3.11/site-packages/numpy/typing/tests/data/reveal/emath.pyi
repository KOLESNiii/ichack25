<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6d4acca (added stuff so I can run on nixos)
from typing import Any

import numpy as np
import numpy.typing as npt

from typing_extensions import assert_type

<<<<<<< HEAD
=======
import numpy as np
import numpy.typing as npt

>>>>>>> 596fb2e (Added incomplete requirements.txt)
=======
>>>>>>> 6d4acca (added stuff so I can run on nixos)
AR_f8: npt.NDArray[np.float64]
AR_c16: npt.NDArray[np.complex128]
f8: np.float64
c16: np.complex128

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> 6d4acca (added stuff so I can run on nixos)
assert_type(np.emath.sqrt(f8), Any)
assert_type(np.emath.sqrt(AR_f8), npt.NDArray[Any])
assert_type(np.emath.sqrt(c16), np.complexfloating[Any, Any])
assert_type(np.emath.sqrt(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])
<<<<<<< HEAD

assert_type(np.emath.log(f8), Any)
assert_type(np.emath.log(AR_f8), npt.NDArray[Any])
assert_type(np.emath.log(c16), np.complexfloating[Any, Any])
assert_type(np.emath.log(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.log10(f8), Any)
assert_type(np.emath.log10(AR_f8), npt.NDArray[Any])
assert_type(np.emath.log10(c16), np.complexfloating[Any, Any])
assert_type(np.emath.log10(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.log2(f8), Any)
assert_type(np.emath.log2(AR_f8), npt.NDArray[Any])
assert_type(np.emath.log2(c16), np.complexfloating[Any, Any])
assert_type(np.emath.log2(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.logn(f8, 2), Any)
assert_type(np.emath.logn(AR_f8, 4), npt.NDArray[Any])
assert_type(np.emath.logn(f8, 1j), np.complexfloating[Any, Any])
assert_type(np.emath.logn(AR_c16, 1.5), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.power(f8, 2), Any)
assert_type(np.emath.power(AR_f8, 4), npt.NDArray[Any])
assert_type(np.emath.power(f8, 2j), np.complexfloating[Any, Any])
assert_type(np.emath.power(AR_c16, 1.5), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.arccos(f8), Any)
assert_type(np.emath.arccos(AR_f8), npt.NDArray[Any])
assert_type(np.emath.arccos(c16), np.complexfloating[Any, Any])
assert_type(np.emath.arccos(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.arcsin(f8), Any)
assert_type(np.emath.arcsin(AR_f8), npt.NDArray[Any])
assert_type(np.emath.arcsin(c16), np.complexfloating[Any, Any])
assert_type(np.emath.arcsin(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.arctanh(f8), Any)
assert_type(np.emath.arctanh(AR_f8), npt.NDArray[Any])
assert_type(np.emath.arctanh(c16), np.complexfloating[Any, Any])
assert_type(np.emath.arctanh(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])
=======
reveal_type(np.emath.sqrt(f8))  # E: Any
reveal_type(np.emath.sqrt(AR_f8))  # E: ndarray[Any, dtype[Any]]
reveal_type(np.emath.sqrt(c16))  # E: complexfloating[Any, Any]
reveal_type(np.emath.sqrt(AR_c16))  # E: ndarray[Any, dtype[complexfloating[Any, Any]]]
=======
>>>>>>> 6d4acca (added stuff so I can run on nixos)

assert_type(np.emath.log(f8), Any)
assert_type(np.emath.log(AR_f8), npt.NDArray[Any])
assert_type(np.emath.log(c16), np.complexfloating[Any, Any])
assert_type(np.emath.log(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.log10(f8), Any)
assert_type(np.emath.log10(AR_f8), npt.NDArray[Any])
assert_type(np.emath.log10(c16), np.complexfloating[Any, Any])
assert_type(np.emath.log10(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.log2(f8), Any)
assert_type(np.emath.log2(AR_f8), npt.NDArray[Any])
assert_type(np.emath.log2(c16), np.complexfloating[Any, Any])
assert_type(np.emath.log2(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.logn(f8, 2), Any)
assert_type(np.emath.logn(AR_f8, 4), npt.NDArray[Any])
assert_type(np.emath.logn(f8, 1j), np.complexfloating[Any, Any])
assert_type(np.emath.logn(AR_c16, 1.5), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.power(f8, 2), Any)
assert_type(np.emath.power(AR_f8, 4), npt.NDArray[Any])
assert_type(np.emath.power(f8, 2j), np.complexfloating[Any, Any])
assert_type(np.emath.power(AR_c16, 1.5), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.arccos(f8), Any)
assert_type(np.emath.arccos(AR_f8), npt.NDArray[Any])
assert_type(np.emath.arccos(c16), np.complexfloating[Any, Any])
assert_type(np.emath.arccos(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

assert_type(np.emath.arcsin(f8), Any)
assert_type(np.emath.arcsin(AR_f8), npt.NDArray[Any])
assert_type(np.emath.arcsin(c16), np.complexfloating[Any, Any])
assert_type(np.emath.arcsin(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])

<<<<<<< HEAD
reveal_type(np.emath.arctanh(f8))  # E: Any
reveal_type(np.emath.arctanh(AR_f8))  # E: ndarray[Any, dtype[Any]]
reveal_type(np.emath.arctanh(c16))  # E: complexfloating[Any, Any]
reveal_type(np.emath.arctanh(AR_c16))  # E: ndarray[Any, dtype[complexfloating[Any, Any]]]
>>>>>>> 596fb2e (Added incomplete requirements.txt)
=======
assert_type(np.emath.arctanh(f8), Any)
assert_type(np.emath.arctanh(AR_f8), npt.NDArray[Any])
assert_type(np.emath.arctanh(c16), np.complexfloating[Any, Any])
assert_type(np.emath.arctanh(AR_c16), npt.NDArray[np.complexfloating[Any, Any]])
>>>>>>> 6d4acca (added stuff so I can run on nixos)
